"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_aics_web_3d_viewer"] = self["webpackChunk_aics_web_3d_viewer"] || []).push([["vendors-node_modules_numcodecs_lz4_js"],{

/***/ "./node_modules/numcodecs/lz4.js":
/*!***************************************!*\
  !*** ./node_modules/numcodecs/lz4.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar lz4_codec = function() {\n  typeof document !== \"undefined\" && document.currentScript ? document.currentScript.src : void 0;\n  return function(lz4_codec2) {\n    lz4_codec2 = lz4_codec2 || {};\n    var e;\n    e || (e = typeof lz4_codec2 !== \"undefined\" ? lz4_codec2 : {});\n    var aa, ba;\n    e.ready = new Promise(function(a, b) {\n      aa = a;\n      ba = b;\n    });\n    var t = {}, u;\n    for (u in e)\n      e.hasOwnProperty(u) && (t[u] = e[u]);\n    var v = e.printErr || console.warn.bind(console);\n    for (u in t)\n      t.hasOwnProperty(u) && (e[u] = t[u]);\n    t = null;\n    var x;\n    e.wasmBinary && (x = e.wasmBinary);\n    e.noExitRuntime && (e.noExitRuntime);\n    typeof WebAssembly !== \"object\" && y(\"no native wasm support detected\");\n    var z, ca = false, da = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : void 0;\n    function ea(a, b, c) {\n      var d = A;\n      if (0 < c) {\n        c = b + c - 1;\n        for (var f = 0; f < a.length; ++f) {\n          var g = a.charCodeAt(f);\n          if (55296 <= g && 57343 >= g) {\n            var n = a.charCodeAt(++f);\n            g = 65536 + ((g & 1023) << 10) | n & 1023;\n          }\n          if (127 >= g) {\n            if (b >= c)\n              break;\n            d[b++] = g;\n          } else {\n            if (2047 >= g) {\n              if (b + 1 >= c)\n                break;\n              d[b++] = 192 | g >> 6;\n            } else {\n              if (65535 >= g) {\n                if (b + 2 >= c)\n                  break;\n                d[b++] = 224 | g >> 12;\n              } else {\n                if (b + 3 >= c)\n                  break;\n                d[b++] = 240 | g >> 18;\n                d[b++] = 128 | g >> 12 & 63;\n              }\n              d[b++] = 128 | g >> 6 & 63;\n            }\n            d[b++] = 128 | g & 63;\n          }\n        }\n        d[b] = 0;\n      }\n    }\n    var fa = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : void 0;\n    function ha(a, b) {\n      var c = a >> 1;\n      for (var d = c + b / 2; !(c >= d) && B[c]; )\n        ++c;\n      c <<= 1;\n      if (32 < c - a && fa)\n        return fa.decode(A.subarray(a, c));\n      c = 0;\n      for (d = \"\"; ; ) {\n        var f = C[a + 2 * c >> 1];\n        if (f == 0 || c == b / 2)\n          return d;\n        ++c;\n        d += String.fromCharCode(f);\n      }\n    }\n    function ia(a, b, c) {\n      c === void 0 && (c = 2147483647);\n      if (2 > c)\n        return 0;\n      c -= 2;\n      var d = b;\n      c = c < 2 * a.length ? c / 2 : a.length;\n      for (var f = 0; f < c; ++f)\n        C[b >> 1] = a.charCodeAt(f), b += 2;\n      C[b >> 1] = 0;\n      return b - d;\n    }\n    function ja(a) {\n      return 2 * a.length;\n    }\n    function ka(a, b) {\n      for (var c = 0, d = \"\"; !(c >= b / 4); ) {\n        var f = D[a + 4 * c >> 2];\n        if (f == 0)\n          break;\n        ++c;\n        65536 <= f ? (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023)) : d += String.fromCharCode(f);\n      }\n      return d;\n    }\n    function la(a, b, c) {\n      c === void 0 && (c = 2147483647);\n      if (4 > c)\n        return 0;\n      var d = b;\n      c = d + c - 4;\n      for (var f = 0; f < a.length; ++f) {\n        var g = a.charCodeAt(f);\n        if (55296 <= g && 57343 >= g) {\n          var n = a.charCodeAt(++f);\n          g = 65536 + ((g & 1023) << 10) | n & 1023;\n        }\n        D[b >> 2] = g;\n        b += 4;\n        if (b + 4 > c)\n          break;\n      }\n      D[b >> 2] = 0;\n      return b - d;\n    }\n    function ma(a) {\n      for (var b = 0, c = 0; c < a.length; ++c) {\n        var d = a.charCodeAt(c);\n        55296 <= d && 57343 >= d && ++c;\n        b += 4;\n      }\n      return b;\n    }\n    var E, F, A, C, B, D, H, na, oa;\n    function pa(a) {\n      E = a;\n      e.HEAP8 = F = new Int8Array(a);\n      e.HEAP16 = C = new Int16Array(a);\n      e.HEAP32 = D = new Int32Array(a);\n      e.HEAPU8 = A = new Uint8Array(a);\n      e.HEAPU16 = B = new Uint16Array(a);\n      e.HEAPU32 = H = new Uint32Array(a);\n      e.HEAPF32 = na = new Float32Array(a);\n      e.HEAPF64 = oa = new Float64Array(a);\n    }\n    var qa = e.INITIAL_MEMORY || 16777216;\n    e.wasmMemory ? z = e.wasmMemory : z = new WebAssembly.Memory({ initial: qa / 65536, maximum: 32768 });\n    z && (E = z.buffer);\n    qa = E.byteLength;\n    pa(E);\n    var I, ra = [], sa = [], ta = [], ua = [];\n    function va() {\n      var a = e.preRun.shift();\n      ra.unshift(a);\n    }\n    var J = 0, L = null;\n    e.preloadedImages = {};\n    e.preloadedAudios = {};\n    function y(a) {\n      if (e.onAbort)\n        e.onAbort(a);\n      v(a);\n      ca = true;\n      a = new WebAssembly.RuntimeError(\"abort(\" + a + \"). Build with -s ASSERTIONS=1 for more info.\");\n      ba(a);\n      throw a;\n    }\n    function xa(a) {\n      var b = M;\n      return String.prototype.startsWith ? b.startsWith(a) : b.indexOf(a) === 0;\n    }\n    function ya() {\n      return xa(\"data:application/octet-stream;base64,\");\n    }\n    var M = \"lz4_codec.wasm\";\n    if (!ya()) {\n      var za = M;\n      M = e.locateFile ? e.locateFile(za, \"\") : \"\" + za;\n    }\n    function Aa() {\n      try {\n        if (x)\n          return new Uint8Array(x);\n        throw \"both async and sync fetching of the wasm failed\";\n      } catch (a) {\n        y(a);\n      }\n    }\n    function N(a) {\n      for (; 0 < a.length; ) {\n        var b = a.shift();\n        if (typeof b == \"function\")\n          b(e);\n        else {\n          var c = b.I;\n          typeof c === \"number\" ? b.D === void 0 ? I.get(c)() : I.get(c)(b.D) : c(b.D === void 0 ? null : b.D);\n        }\n      }\n    }\n    function Ba(a) {\n      this.C = a - 16;\n      this.P = function(b) {\n        D[this.C + 8 >> 2] = b;\n      };\n      this.M = function(b) {\n        D[this.C + 0 >> 2] = b;\n      };\n      this.N = function() {\n        D[this.C + 4 >> 2] = 0;\n      };\n      this.L = function() {\n        F[this.C + 12 >> 0] = 0;\n      };\n      this.O = function() {\n        F[this.C + 13 >> 0] = 0;\n      };\n      this.K = function(b, c) {\n        this.P(b);\n        this.M(c);\n        this.N();\n        this.L();\n        this.O();\n      };\n    }\n    function Ca(a) {\n      switch (a) {\n        case 1:\n          return 0;\n        case 2:\n          return 1;\n        case 4:\n          return 2;\n        case 8:\n          return 3;\n        default:\n          throw new TypeError(\"Unknown type size: \" + a);\n      }\n    }\n    var Da = void 0;\n    function P(a) {\n      for (var b = \"\"; A[a]; )\n        b += Da[A[a++]];\n      return b;\n    }\n    var Q = {}, R = {}, S = {};\n    function Ea(a) {\n      if (a === void 0)\n        return \"_unknown\";\n      a = a.replace(/[^a-zA-Z0-9_]/g, \"$\");\n      var b = a.charCodeAt(0);\n      return 48 <= b && 57 >= b ? \"_\" + a : a;\n    }\n    function Fa(a, b) {\n      a = Ea(a);\n      return new Function(\"body\", \"return function \" + a + '() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n')(b);\n    }\n    function Ga(a) {\n      var b = Error, c = Fa(a, function(d) {\n        this.name = a;\n        this.message = d;\n        d = Error(d).stack;\n        d !== void 0 && (this.stack = this.toString() + \"\\n\" + d.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n      });\n      c.prototype = Object.create(b.prototype);\n      c.prototype.constructor = c;\n      c.prototype.toString = function() {\n        return this.message === void 0 ? this.name : this.name + \": \" + this.message;\n      };\n      return c;\n    }\n    var Ha = void 0;\n    function T(a) {\n      throw new Ha(a);\n    }\n    var Ia = void 0;\n    function La(a, b) {\n      function c(h) {\n        h = b(h);\n        if (h.length !== d.length)\n          throw new Ia(\"Mismatched type converter count\");\n        for (var l = 0; l < d.length; ++l)\n          U(d[l], h[l]);\n      }\n      var d = [];\n      d.forEach(function(h) {\n        S[h] = a;\n      });\n      var f = Array(a.length), g = [], n = 0;\n      a.forEach(function(h, l) {\n        R.hasOwnProperty(h) ? f[l] = R[h] : (g.push(h), Q.hasOwnProperty(h) || (Q[h] = []), Q[h].push(function() {\n          f[l] = R[h];\n          ++n;\n          n === g.length && c(f);\n        }));\n      });\n      g.length === 0 && c(f);\n    }\n    function U(a, b, c) {\n      c = c || {};\n      if (!(\"argPackAdvance\" in b))\n        throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n      var d = b.name;\n      a || T('type \"' + d + '\" must have a positive integer typeid pointer');\n      if (R.hasOwnProperty(a)) {\n        if (c.J)\n          return;\n        T(\"Cannot register type '\" + d + \"' twice\");\n      }\n      R[a] = b;\n      delete S[a];\n      Q.hasOwnProperty(a) && (b = Q[a], delete Q[a], b.forEach(function(f) {\n        f();\n      }));\n    }\n    var Ma = [], V = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];\n    function Na(a) {\n      4 < a && --V[a].F === 0 && (V[a] = void 0, Ma.push(a));\n    }\n    function Oa(a) {\n      switch (a) {\n        case void 0:\n          return 1;\n        case null:\n          return 2;\n        case true:\n          return 3;\n        case false:\n          return 4;\n        default:\n          var b = Ma.length ? Ma.pop() : V.length;\n          V[b] = { F: 1, value: a };\n          return b;\n      }\n    }\n    function Pa(a) {\n      return this.fromWireType(H[a >> 2]);\n    }\n    function Qa(a) {\n      if (a === null)\n        return \"null\";\n      var b = typeof a;\n      return b === \"object\" || b === \"array\" || b === \"function\" ? a.toString() : \"\" + a;\n    }\n    function Ra(a, b) {\n      switch (b) {\n        case 2:\n          return function(c) {\n            return this.fromWireType(na[c >> 2]);\n          };\n        case 3:\n          return function(c) {\n            return this.fromWireType(oa[c >> 3]);\n          };\n        default:\n          throw new TypeError(\"Unknown float type: \" + a);\n      }\n    }\n    function Sa(a) {\n      var b = Function;\n      if (!(b instanceof Function))\n        throw new TypeError(\"new_ called with constructor type \" + typeof b + \" which is not a function\");\n      var c = Fa(b.name || \"unknownFunctionName\", function() {\n      });\n      c.prototype = b.prototype;\n      c = new c();\n      a = b.apply(c, a);\n      return a instanceof Object ? a : c;\n    }\n    function Ta(a) {\n      for (; a.length; ) {\n        var b = a.pop();\n        a.pop()(b);\n      }\n    }\n    function Ua(a, b) {\n      var c = e;\n      if (c[a].A === void 0) {\n        var d = c[a];\n        c[a] = function() {\n          c[a].A.hasOwnProperty(arguments.length) || T(\"Function '\" + b + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + c[a].A + \")!\");\n          return c[a].A[arguments.length].apply(this, arguments);\n        };\n        c[a].A = [];\n        c[a].A[d.H] = d;\n      }\n    }\n    function Va(a, b, c) {\n      e.hasOwnProperty(a) ? ((c === void 0 || e[a].A !== void 0 && e[a].A[c] !== void 0) && T(\"Cannot register public name '\" + a + \"' twice\"), Ua(a, a), e.hasOwnProperty(c) && T(\"Cannot register multiple overloads of a function with the same number of arguments (\" + c + \")!\"), e[a].A[c] = b) : (e[a] = b, c !== void 0 && (e[a].S = c));\n    }\n    function Wa(a, b) {\n      for (var c = [], d = 0; d < a; d++)\n        c.push(D[(b >> 2) + d]);\n      return c;\n    }\n    function Xa(a, b) {\n      0 <= a.indexOf(\"j\") || y(\"Assertion failed: getDynCaller should only be called with i64 sigs\");\n      var c = [];\n      return function() {\n        c.length = arguments.length;\n        for (var d = 0; d < arguments.length; d++)\n          c[d] = arguments[d];\n        var f;\n        a.indexOf(\"j\") != -1 ? f = c && c.length ? e[\"dynCall_\" + a].apply(null, [b].concat(c)) : e[\"dynCall_\" + a].call(null, b) : f = I.get(b).apply(null, c);\n        return f;\n      };\n    }\n    function Ya(a, b) {\n      a = P(a);\n      var c = a.indexOf(\"j\") != -1 ? Xa(a, b) : I.get(b);\n      typeof c !== \"function\" && T(\"unknown function pointer with signature \" + a + \": \" + b);\n      return c;\n    }\n    var Za = void 0;\n    function $a(a) {\n      a = ab(a);\n      var b = P(a);\n      W(a);\n      return b;\n    }\n    function bb(a, b) {\n      function c(g) {\n        f[g] || R[g] || (S[g] ? S[g].forEach(c) : (d.push(g), f[g] = true));\n      }\n      var d = [], f = {};\n      b.forEach(c);\n      throw new Za(a + \": \" + d.map($a).join([\", \"]));\n    }\n    function cb(a, b, c) {\n      switch (b) {\n        case 0:\n          return c ? function(d) {\n            return F[d];\n          } : function(d) {\n            return A[d];\n          };\n        case 1:\n          return c ? function(d) {\n            return C[d >> 1];\n          } : function(d) {\n            return B[d >> 1];\n          };\n        case 2:\n          return c ? function(d) {\n            return D[d >> 2];\n          } : function(d) {\n            return H[d >> 2];\n          };\n        default:\n          throw new TypeError(\"Unknown integer type: \" + a);\n      }\n    }\n    for (var db = Array(256), X = 0; 256 > X; ++X)\n      db[X] = String.fromCharCode(X);\n    Da = db;\n    Ha = e.BindingError = Ga(\"BindingError\");\n    Ia = e.InternalError = Ga(\"InternalError\");\n    e.count_emval_handles = function() {\n      for (var a = 0, b = 5; b < V.length; ++b)\n        V[b] !== void 0 && ++a;\n      return a;\n    };\n    e.get_first_emval = function() {\n      for (var a = 5; a < V.length; ++a)\n        if (V[a] !== void 0)\n          return V[a];\n      return null;\n    };\n    Za = e.UnboundTypeError = Ga(\"UnboundTypeError\");\n    sa.push({ I: function() {\n      eb();\n    } });\n    var fb = {\n      l: function(a) {\n        return Y(a + 16) + 16;\n      },\n      k: function(a, b, c) {\n        new Ba(a).K(b, c);\n        throw a;\n      },\n      h: function(a, b, c, d, f) {\n        var g = Ca(c);\n        b = P(b);\n        U(a, { name: b, fromWireType: function(n) {\n          return !!n;\n        }, toWireType: function(n, h) {\n          return h ? d : f;\n        }, argPackAdvance: 8, readValueFromPointer: function(n) {\n          if (c === 1)\n            var h = F;\n          else if (c === 2)\n            h = C;\n          else if (c === 4)\n            h = D;\n          else\n            throw new TypeError(\"Unknown boolean type size: \" + b);\n          return this.fromWireType(h[n >> g]);\n        }, B: null });\n      },\n      q: function(a, b) {\n        b = P(b);\n        U(a, { name: b, fromWireType: function(c) {\n          var d = V[c].value;\n          Na(c);\n          return d;\n        }, toWireType: function(c, d) {\n          return Oa(d);\n        }, argPackAdvance: 8, readValueFromPointer: Pa, B: null });\n      },\n      g: function(a, b, c) {\n        c = Ca(c);\n        b = P(b);\n        U(a, { name: b, fromWireType: function(d) {\n          return d;\n        }, toWireType: function(d, f) {\n          if (typeof f !== \"number\" && typeof f !== \"boolean\")\n            throw new TypeError('Cannot convert \"' + Qa(f) + '\" to ' + this.name);\n          return f;\n        }, argPackAdvance: 8, readValueFromPointer: Ra(b, c), B: null });\n      },\n      e: function(a, b, c, d, f, g) {\n        var n = Wa(b, c);\n        a = P(a);\n        f = Ya(d, f);\n        Va(a, function() {\n          bb(\"Cannot call \" + a + \" due to unbound types\", n);\n        }, b - 1);\n        La(n, function(h) {\n          var l = a, p = a;\n          h = [h[0], null].concat(h.slice(1));\n          var q = f, m = h.length;\n          2 > m && T(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n          for (var r = h[1] !== null && false, w = false, k = 1; k < h.length; ++k)\n            if (h[k] !== null && h[k].B === void 0) {\n              w = true;\n              break;\n            }\n          var Ja = h[0].name !== \"void\", G = \"\", K = \"\";\n          for (k = 0; k < m - 2; ++k)\n            G += (k !== 0 ? \", \" : \"\") + \"arg\" + k, K += (k !== 0 ? \", \" : \"\") + \"arg\" + k + \"Wired\";\n          p = \"return function \" + Ea(p) + \"(\" + G + \") {\\nif (arguments.length !== \" + (m - 2) + \") {\\nthrowBindingError('function \" + p + \" called with ' + arguments.length + ' arguments, expected \" + (m - 2) + \" args!');\\n}\\n\";\n          w && (p += \"var destructors = [];\\n\");\n          var Ka = w ? \"destructors\" : \"null\";\n          G = \"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");\n          q = [T, q, g, Ta, h[0], h[1]];\n          r && (p += \"var thisWired = classParam.toWireType(\" + Ka + \", this);\\n\");\n          for (k = 0; k < m - 2; ++k)\n            p += \"var arg\" + k + \"Wired = argType\" + k + \".toWireType(\" + Ka + \", arg\" + k + \"); // \" + h[k + 2].name + \"\\n\", G.push(\"argType\" + k), q.push(h[k + 2]);\n          r && (K = \"thisWired\" + (0 < K.length ? \", \" : \"\") + K);\n          p += (Ja ? \"var rv = \" : \"\") + \"invoker(fn\" + (0 < K.length ? \", \" : \"\") + K + \");\\n\";\n          if (w)\n            p += \"runDestructors(destructors);\\n\";\n          else\n            for (k = r ? 1 : 2; k < h.length; ++k)\n              m = k === 1 ? \"thisWired\" : \"arg\" + (k - 2) + \"Wired\", h[k].B !== null && (p += m + \"_dtor(\" + m + \"); // \" + h[k].name + \"\\n\", G.push(m + \"_dtor\"), q.push(h[k].B));\n          Ja && (p += \"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");\n          G.push(p + \"}\\n\");\n          h = Sa(G).apply(null, q);\n          k = b - 1;\n          if (!e.hasOwnProperty(l))\n            throw new Ia(\"Replacing nonexistant public symbol\");\n          e[l].A !== void 0 && k !== void 0 ? e[l].A[k] = h : (e[l] = h, e[l].H = k);\n          return [];\n        });\n      },\n      c: function(a, b, c, d, f) {\n        function g(p) {\n          return p;\n        }\n        b = P(b);\n        f === -1 && (f = 4294967295);\n        var n = Ca(c);\n        if (d === 0) {\n          var h = 32 - 8 * c;\n          g = function(p) {\n            return p << h >>> h;\n          };\n        }\n        var l = b.indexOf(\"unsigned\") != -1;\n        U(a, { name: b, fromWireType: g, toWireType: function(p, q) {\n          if (typeof q !== \"number\" && typeof q !== \"boolean\")\n            throw new TypeError('Cannot convert \"' + Qa(q) + '\" to ' + this.name);\n          if (q < d || q > f)\n            throw new TypeError('Passing a number \"' + Qa(q) + '\" from JS side to C/C++ side to an argument of type \"' + b + '\", which is outside the valid range [' + d + \", \" + f + \"]!\");\n          return l ? q >>> 0 : q | 0;\n        }, argPackAdvance: 8, readValueFromPointer: cb(b, n, d !== 0), B: null });\n      },\n      b: function(a, b, c) {\n        function d(g) {\n          g >>= 2;\n          var n = H;\n          return new f(E, n[g + 1], n[g]);\n        }\n        var f = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][b];\n        c = P(c);\n        U(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { J: true });\n      },\n      f: function(a, b) {\n        b = P(b);\n        var c = b === \"std::string\";\n        U(a, { name: b, fromWireType: function(d) {\n          var f = H[d >> 2];\n          if (c)\n            for (var g = d + 4, n = 0; n <= f; ++n) {\n              var h = d + 4 + n;\n              if (n == f || A[h] == 0) {\n                if (g) {\n                  var l = g;\n                  var p = A, q = l + (h - g);\n                  for (g = l; p[g] && !(g >= q); )\n                    ++g;\n                  if (16 < g - l && p.subarray && da)\n                    l = da.decode(p.subarray(l, g));\n                  else {\n                    for (q = \"\"; l < g; ) {\n                      var m = p[l++];\n                      if (m & 128) {\n                        var r = p[l++] & 63;\n                        if ((m & 224) == 192)\n                          q += String.fromCharCode((m & 31) << 6 | r);\n                        else {\n                          var w = p[l++] & 63;\n                          m = (m & 240) == 224 ? (m & 15) << 12 | r << 6 | w : (m & 7) << 18 | r << 12 | w << 6 | p[l++] & 63;\n                          65536 > m ? q += String.fromCharCode(m) : (m -= 65536, q += String.fromCharCode(55296 | m >> 10, 56320 | m & 1023));\n                        }\n                      } else\n                        q += String.fromCharCode(m);\n                    }\n                    l = q;\n                  }\n                } else\n                  l = \"\";\n                if (k === void 0)\n                  var k = l;\n                else\n                  k += String.fromCharCode(0), k += l;\n                g = h + 1;\n              }\n            }\n          else {\n            k = Array(f);\n            for (n = 0; n < f; ++n)\n              k[n] = String.fromCharCode(A[d + 4 + n]);\n            k = k.join(\"\");\n          }\n          W(d);\n          return k;\n        }, toWireType: function(d, f) {\n          f instanceof ArrayBuffer && (f = new Uint8Array(f));\n          var g = typeof f === \"string\";\n          g || f instanceof Uint8Array || f instanceof Uint8ClampedArray || f instanceof Int8Array || T(\"Cannot pass non-string to std::string\");\n          var n = (c && g ? function() {\n            for (var p = 0, q = 0; q < f.length; ++q) {\n              var m = f.charCodeAt(q);\n              55296 <= m && 57343 >= m && (m = 65536 + ((m & 1023) << 10) | f.charCodeAt(++q) & 1023);\n              127 >= m ? ++p : p = 2047 >= m ? p + 2 : 65535 >= m ? p + 3 : p + 4;\n            }\n            return p;\n          } : function() {\n            return f.length;\n          })(), h = Y(4 + n + 1);\n          H[h >> 2] = n;\n          if (c && g)\n            ea(f, h + 4, n + 1);\n          else if (g)\n            for (g = 0; g < n; ++g) {\n              var l = f.charCodeAt(g);\n              255 < l && (W(h), T(\"String has UTF-16 code units that do not fit in 8 bits\"));\n              A[h + 4 + g] = l;\n            }\n          else\n            for (g = 0; g < n; ++g)\n              A[h + 4 + g] = f[g];\n          d !== null && d.push(W, h);\n          return h;\n        }, argPackAdvance: 8, readValueFromPointer: Pa, B: function(d) {\n          W(d);\n        } });\n      },\n      d: function(a, b, c) {\n        c = P(c);\n        if (b === 2) {\n          var d = ha;\n          var f = ia;\n          var g = ja;\n          var n = function() {\n            return B;\n          };\n          var h = 1;\n        } else\n          b === 4 && (d = ka, f = la, g = ma, n = function() {\n            return H;\n          }, h = 2);\n        U(a, { name: c, fromWireType: function(l) {\n          for (var p = H[l >> 2], q = n(), m, r = l + 4, w = 0; w <= p; ++w) {\n            var k = l + 4 + w * b;\n            if (w == p || q[k >> h] == 0)\n              r = d(r, k - r), m === void 0 ? m = r : (m += String.fromCharCode(0), m += r), r = k + b;\n          }\n          W(l);\n          return m;\n        }, toWireType: function(l, p) {\n          typeof p !== \"string\" && T(\"Cannot pass non-string to C++ string type \" + c);\n          var q = g(p), m = Y(4 + q + b);\n          H[m >> 2] = q >> h;\n          f(p, m + 4, q + b);\n          l !== null && l.push(W, m);\n          return m;\n        }, argPackAdvance: 8, readValueFromPointer: Pa, B: function(l) {\n          W(l);\n        } });\n      },\n      i: function(a, b) {\n        b = P(b);\n        U(a, { R: true, name: b, argPackAdvance: 0, fromWireType: function() {\n        }, toWireType: function() {\n        } });\n      },\n      j: Na,\n      m: function(a) {\n        4 < a && (V[a].F += 1);\n      },\n      r: function(a, b) {\n        var c = R[a];\n        c === void 0 && T(\"_emval_take_value has unknown type \" + $a(a));\n        a = c.readValueFromPointer(b);\n        return Oa(a);\n      },\n      p: function() {\n        y();\n      },\n      n: function(a, b, c) {\n        A.copyWithin(a, b, b + c);\n      },\n      o: function(a) {\n        a >>>= 0;\n        var b = A.length;\n        if (2147483648 < a)\n          return false;\n        for (var c = 1; 4 >= c; c *= 2) {\n          var d = b * (1 + 0.2 / c);\n          d = Math.min(d, a + 100663296);\n          d = Math.max(16777216, a, d);\n          0 < d % 65536 && (d += 65536 - d % 65536);\n          a: {\n            try {\n              z.grow(Math.min(2147483648, d) - E.byteLength + 65535 >>> 16);\n              pa(z.buffer);\n              var f = 1;\n              break a;\n            } catch (g) {\n            }\n            f = void 0;\n          }\n          if (f)\n            return true;\n        }\n        return false;\n      },\n      a: z\n    };\n    (function() {\n      function a(f) {\n        e.asm = f.exports;\n        I = e.asm.s;\n        J--;\n        e.monitorRunDependencies && e.monitorRunDependencies(J);\n        J == 0 && (L && (f = L, L = null, f()));\n      }\n      function b(f) {\n        a(f.instance);\n      }\n      function c(f) {\n        return Promise.resolve().then(Aa).then(function(g) {\n          return WebAssembly.instantiate(g, d);\n        }).then(f, function(g) {\n          v(\"failed to asynchronously prepare wasm: \" + g);\n          y(g);\n        });\n      }\n      var d = { a: fb };\n      J++;\n      e.monitorRunDependencies && e.monitorRunDependencies(J);\n      if (e.instantiateWasm)\n        try {\n          return e.instantiateWasm(d, a);\n        } catch (f) {\n          return v(\"Module.instantiateWasm callback failed with error: \" + f), false;\n        }\n      (function() {\n        return x || typeof WebAssembly.instantiateStreaming !== \"function\" || ya() || xa(\"file://\") || typeof fetch !== \"function\" ? c(b) : fetch(M, { credentials: \"same-origin\" }).then(function(f) {\n          return WebAssembly.instantiateStreaming(f, d).then(b, function(g) {\n            v(\"wasm streaming compile failed: \" + g);\n            v(\"falling back to ArrayBuffer instantiation\");\n            return c(b);\n          });\n        });\n      })().catch(ba);\n      return {};\n    })();\n    var eb = e.___wasm_call_ctors = function() {\n      return (eb = e.___wasm_call_ctors = e.asm.t).apply(null, arguments);\n    }, Y = e._malloc = function() {\n      return (Y = e._malloc = e.asm.u).apply(null, arguments);\n    }, W = e._free = function() {\n      return (W = e._free = e.asm.v).apply(null, arguments);\n    }, ab = e.___getTypeName = function() {\n      return (ab = e.___getTypeName = e.asm.w).apply(null, arguments);\n    };\n    e.___embind_register_native_and_builtin_types = function() {\n      return (e.___embind_register_native_and_builtin_types = e.asm.x).apply(null, arguments);\n    };\n    var Z;\n    L = function gb() {\n      Z || hb();\n      Z || (L = gb);\n    };\n    function hb() {\n      function a() {\n        if (!Z && (Z = true, e.calledRun = true, !ca)) {\n          N(sa);\n          N(ta);\n          aa(e);\n          if (e.onRuntimeInitialized)\n            e.onRuntimeInitialized();\n          if (e.postRun)\n            for (typeof e.postRun == \"function\" && (e.postRun = [e.postRun]); e.postRun.length; ) {\n              var b = e.postRun.shift();\n              ua.unshift(b);\n            }\n          N(ua);\n        }\n      }\n      if (!(0 < J)) {\n        if (e.preRun)\n          for (typeof e.preRun == \"function\" && (e.preRun = [e.preRun]); e.preRun.length; )\n            va();\n        N(ra);\n        0 < J || (e.setStatus ? (e.setStatus(\"Running...\"), setTimeout(function() {\n          setTimeout(function() {\n            e.setStatus(\"\");\n          }, 1);\n          a();\n        }, 1)) : a());\n      }\n    }\n    e.run = hb;\n    if (e.preInit)\n      for (typeof e.preInit == \"function\" && (e.preInit = [e.preInit]); 0 < e.preInit.length; )\n        e.preInit.pop()();\n    hb();\n    return lz4_codec2.ready;\n  };\n}();\n\nvar __isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nvar __toBinary = __isNode\n  ? base64 => new Uint8Array(Buffer.from(base64, 'base64'))\n  : /* @__PURE__ */ (() => {\n    var table = new Uint8Array(128);\n    for (var i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;\n    return base64 => {\n      var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == '=') - (base64[n - 2] == '=')) * 3 / 4 | 0);\n      for (var i = 0, j = 0; i < n;) {\n        var c0 = table[base64.charCodeAt(i++)], c1 = table[base64.charCodeAt(i++)];\n        var c2 = table[base64.charCodeAt(i++)], c3 = table[base64.charCodeAt(i++)];\n        bytes[j++] = (c0 << 2) | (c1 >> 4);\n        bytes[j++] = (c1 << 4) | (c2 >> 2);\n        bytes[j++] = (c2 << 6) | c3;\n      }\n      return bytes\n    }\n  })();\nvar wasmBinary = __toBinary(\"\");\n\nvar _a;\nconst DEFAULT_ACCELERATION = 1;\nconst MAX_BUFFER_SIZE = 2113929216;\nlet emscriptenModule;\nconst init = () => lz4_codec({ noInitialRun: true, wasmBinary });\nconst LZ4 = (_a = class {\n  constructor(acceleration = DEFAULT_ACCELERATION) {\n    this.max_buffer_size = MAX_BUFFER_SIZE;\n    if (!Number.isInteger(acceleration)) {\n      throw Error(`Invalid acceleration \"${acceleration}\". Must be a positive integer.`);\n    }\n    this.acceleration = acceleration <= 0 ? DEFAULT_ACCELERATION : acceleration;\n  }\n  static fromConfig({ acceleration }) {\n    return new _a(acceleration);\n  }\n  async encode(data) {\n    if (!emscriptenModule) {\n      emscriptenModule = init();\n    }\n    if (data.length > MAX_BUFFER_SIZE) {\n      throw Error(`Codec does not support buffers of > ${MAX_BUFFER_SIZE} bytes.`);\n    }\n    const module = await emscriptenModule;\n    const view = module.compress(data, this.acceleration);\n    const result = new Uint8Array(view);\n    module.free_result();\n    return result;\n  }\n  async decode(data, out) {\n    if (!emscriptenModule) {\n      emscriptenModule = init();\n    }\n    if (data.length > MAX_BUFFER_SIZE) {\n      throw Error(`Codec does not support buffers of > ${MAX_BUFFER_SIZE} bytes.`);\n    }\n    const module = await emscriptenModule;\n    const view = module.decompress(data);\n    const result = new Uint8Array(view);\n    module.free_result();\n    if (out !== void 0) {\n      out.set(result);\n      return out;\n    }\n    return result;\n  }\n}, _a.codecId = \"lz4\", _a.DEFAULT_ACCELERATION = DEFAULT_ACCELERATION, _a.max_buffer_size = MAX_BUFFER_SIZE, _a);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LZ4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/numcodecs/lz4.js\n");

/***/ })

}]);